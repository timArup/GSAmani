# -*- coding: mbcs -*-
typelib_path = 'C:\\Program Files\\Oasys\\GSA 10.1\\Gsa.tlb'
_lcid = 0  # change this if required
from ctypes import *
from comtypes import BSTR
from comtypes.automation import _midlSAFEARRAY
import gsapy.stdole
from comtypes import GUID
from ctypes import HRESULT
from comtypes.automation import VARIANT
from ctypes.wintypes import VARIANT_BOOL
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
from comtypes import CoClass


# values for enumeration 'GsRevit_Usage'
FRAMING = 1
COLUMNS = 2
GsRevit_Usage = c_int  # enum


class GsaElement(Structure):
    _recordinfo_ = ('{668500CE-5D79-454D-978C-5A4B0BF0E8EC}',
                    10, 1, 0, '{FA6A47F6-0904-4ECE-BD65-E5CFADB495B7}')


GsaElement._fields_ = [
    ('Ref', c_int),
    ('Name', BSTR),
    ('Color', c_int),
    ('eType', c_int),
    ('Property', c_int),
    ('Group', c_int),
    ('NumTopo', c_int),
    ('Topo', _midlSAFEARRAY(c_int)),
    ('Beta', c_double),
    ('OrientNode', c_int),
]
assert sizeof(GsaElement) == 64, sizeof(GsaElement)
assert alignment(GsaElement) == 8, alignment(GsaElement)


class GsaNode(Structure):
    _recordinfo_ = ('{668500CE-5D79-454D-978C-5A4B0BF0E8EC}',
                    10, 1, 0, '{E3DB84F7-3A28-4B2E-B931-3DE3341869C2}')


GsaNode._fields_ = [
    ('Ref', c_int),
    ('Name', BSTR),
    ('Color', c_int),
    ('Coor', _midlSAFEARRAY(c_double)),
    ('Restraint', c_int),
    ('Stiffness', _midlSAFEARRAY(c_double)),
]
assert sizeof(GsaNode) == 48, sizeof(GsaNode)
assert alignment(GsaNode) == 8, alignment(GsaNode)

# values for enumeration 'RestraintDir'
RD_FREE = 0
RD_X = 1
RD_Y = 2
RD_Z = 4
RD_PIN = 7
RD_XX = 8
RD_YY = 16
RD_ZZ = 32
RD_RPIN = 56
RD_ENC = 63
RD_DIS = 7
RD_ROT = 56
RD_ALL = 63
RestraintDir = c_int  # enum

# values for enumeration 'GsRevit_SectTrnsDir'
GSA_TO_REVIT = 1
REVIT_TO_GSA = 2
GsRevit_SectTrnsDir = c_int  # enum


class IComAuto(gsapy.stdole.IDispatch):
    _case_insensitive_ = True
    'IComAuto Interface'
    _iid_ = GUID('{9A10ACA7-23B7-4044-9E36-1442ACCF55D0}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']


# values for enumeration 'GsaEntity'
NODE = 1
ELEMENT = 2
MEMBER = 3
LINE = 6
AREA = 7
REGION = 8
GsaEntity = c_int  # enum

# values for enumeration 'Locale'
LOC_SYSTEM = 1
LOC_EN_GB = 2
Locale = c_int  # enum

# values for enumeration 'ResHeader'
REF_DISP = 12001000
REF_VEL = 12002000
REF_ACC = 12003000
REF_REAC = 12004000
REF_FORCE_CONSTR = 12005000
REF_FORCE_NODAL = 12006000
REF_MASS_NODAL = 12007000
REF_SOIL_NODAL = 12008000
REF_DISP_EL0D = 13001000
REF_FORCE_EL0D = 13002000
REF_DISP_EL1D = 14001000
REF_END_ROT_EL1D = 14001500
REF_FORCE_EL1D = 14002000
REF_STRESS_EL1D = 14003000
REF_STRESS_EL1D_DRV = 14003200
REF_STRAIN_EL1D = 14003500
REF_SED_EL1D = 14004000
REF_SED_AVG_EL1D = 14005000
REF_STL_UTIL = 14006000
REF_DISP_EL2D = 15001000
REF_FORCE_EL2D_DRV = 15002000
REF_MOMENT_EL2D_PRJ = 15003000
REF_FORCE_EL2D_PRJ = 15004000
REF_STRESS_EL2D_DRV = 15005000
REF_STRESS_EL2D_AX = 15006000
REF_STRESS_EL2D_PRJ = 15007000
REF_RC_SLAB_REINF = 15010000
ResHeader = c_int  # enum


class GsaResults(Structure):
    _recordinfo_ = ('{668500CE-5D79-454D-978C-5A4B0BF0E8EC}',
                    10, 1, 0, '{835C1345-2119-4600-A65F-1111C2F5B17B}')


GsaResults._fields_ = [
    ('NumComponents', c_int),
    ('dynaResults', _midlSAFEARRAY(c_double)),
    ('Pos', c_double),
]
assert sizeof(GsaResults) == 24, sizeof(GsaResults)
assert alignment(GsaResults) == 8, alignment(GsaResults)


class GsaSection(Structure):
    _recordinfo_ = ('{668500CE-5D79-454D-978C-5A4B0BF0E8EC}',
                    10, 1, 0, '{F7EA0259-2FDE-4425-BFF5-CED993221371}')


GsaSection._fields_ = [
    ('Ref', c_int),
    ('Name', BSTR),
    ('Color', c_int),
    ('SectDesc', BSTR),
    ('Material', c_int),
]
assert sizeof(GsaSection) == 40, sizeof(GsaSection)
assert alignment(GsaSection) == 8, alignment(GsaSection)


IComAuto._methods_ = [
    COMMETHOD([dispid(1), helpstring('method Open')], HRESULT, 'Open',
              (['in'], BSTR, 'sPathName'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(2), helpstring('method Analyse')], HRESULT, 'Analyse',
              (['in', 'optional'], VARIANT, 'Task'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(3), helpstring('method Save')], HRESULT, 'Save',
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(4), helpstring('method SaveAs')], HRESULT, 'SaveAs',
              (['in'], BSTR, 'sPathName'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(5), helpstring('method Delete')], HRESULT, 'Delete',
              (['in'], BSTR, 'sContent'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(6), helpstring('method Close')], HRESULT, 'Close',
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(7), helpstring('method UpdateViews')],
              HRESULT, 'UpdateViews'),
    COMMETHOD([dispid(8), helpstring('method NewFile')], HRESULT, 'NewFile',
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(9), helpstring('method GwaCommand')], HRESULT, 'GwaCommand',
              (['in'], BSTR, 'sCommand'),
              (['retval', 'out'], POINTER(VARIANT), 'result')),
    COMMETHOD([dispid(10), helpstring('method PrintView')], HRESULT, 'PrintView',
              (['in'], BSTR, 'sView'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(11), helpstring('method HighestView')], HRESULT, 'HighestView',
              (['in'], BSTR, 'sViewType'),
              (['retval', 'out'], POINTER(c_int), 'iView')),
    COMMETHOD([dispid(12), helpstring('method ViewExist')], HRESULT, 'ViewExist',
              (['in'], BSTR, 'sViewType'),
              (['in'], c_int, 'iRef'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(13), helpstring('method ViewName')], HRESULT, 'ViewName',
              (['in'], BSTR, 'sViewType'),
              (['in'], c_int, 'iRef'),
              (['retval', 'out'], POINTER(BSTR), 'sName')),
    COMMETHOD([dispid(14), helpstring('method NumArg')], HRESULT, 'NumArg',
              (['in'], BSTR, 'sLine'),
              (['retval', 'out'], POINTER(c_int), 'iArg')),
    COMMETHOD([dispid(15), helpstring('method Arg')], HRESULT, 'Arg',
              (['in'], c_int, 'iIndex'),
              (['in'], BSTR, 'sLine'),
              (['retval', 'out'], POINTER(BSTR), 'sArg')),
    COMMETHOD([dispid(16), helpstring('method SaveViewToFile')], HRESULT, 'SaveViewToFile',
              (['in'], BSTR, 'sView'),
              (['in'], BSTR, 'sFileType'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(17), helpstring('method Output_Init')], HRESULT, 'Output_Init',
              (['in'], c_int, 'iFlags'),
              (['in'], BSTR, 'sAxis'),
              (['in'], BSTR, 'sCase'),
              (['in'], c_int, 'iDataRef'),
              (['in'], c_int, 'iNumEqInt1DPos'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(18), helpstring('method Output_SetStage')], HRESULT, 'Output_SetStage',
              (['in'], c_int, 'iStage'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(19), helpstring('method Output_DataTitle')], HRESULT, 'Output_DataTitle',
              (['in'], c_int, 'iFlags'),
              (['retval', 'out'], POINTER(BSTR), 'sTitle')),
    COMMETHOD([dispid(20), helpstring('method Output_IsDataRef')], HRESULT, 'Output_IsDataRef',
              (['in'], c_int, 'iFlags'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(21), helpstring('method Output_UnitString')], HRESULT, 'Output_UnitString',
              (['retval', 'out'], POINTER(BSTR), 'sUnit')),
    COMMETHOD([dispid(22), helpstring('method Output_UnitFactor')], HRESULT, 'Output_UnitFactor',
              (['retval', 'out'], POINTER(c_float), 'fFactor')),
    COMMETHOD([dispid(23), helpstring('method Output_DataExist')], HRESULT, 'Output_DataExist',
              (['in'], c_int, 'iRef'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(24), helpstring('method Output_NumElemPos')], HRESULT, 'Output_NumElemPos',
              (['in'], c_int, 'iRef'),
              (['retval', 'out'], POINTER(c_int), 'iNum')),
    COMMETHOD([dispid(25), helpstring('method Output_1DElemPos')], HRESULT, 'Output_1DElemPos',
              (['in'], c_int, 'iPos'),
              (['retval', 'out'], POINTER(c_float), 'fPos')),
    COMMETHOD([dispid(26), helpstring('method Output_Extract')], HRESULT, 'Output_Extract',
              (['in'], c_int, 'iRef'),
              (['in'], c_int, 'iPos'),
              (['retval', 'out'], POINTER(VARIANT), 'cVariant')),
    COMMETHOD([dispid(27), helpstring('method HighestCase')], HRESULT, 'HighestCase',
              (['in'], BSTR, 'sCaseOp'),
              (['retval', 'out'], POINTER(c_int), 'iCase')),
    COMMETHOD([dispid(28), helpstring('method CaseExist')], HRESULT, 'CaseExist',
              (['in'], BSTR, 'sCaseOp'),
              (['in'], c_int, 'iRef'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(29), helpstring('method CaseName')], HRESULT, 'CaseName',
              (['in'], BSTR, 'sCaseOp'),
              (['in'], c_int, 'iRef'),
              (['retval', 'out'], POINTER(BSTR), 'sName')),
    COMMETHOD([dispid(30), helpstring('method CaseNumPerm')], HRESULT, 'CaseNumPerm',
              (['in'], BSTR, 'sCaseOp'),
              (['in'], c_int, 'iRef'),
              (['retval', 'out'], POINTER(c_int), 'nPerm')),
    COMMETHOD([dispid(31), helpstring('method CasePermDesc')], HRESULT, 'CasePermDesc',
              (['in'], BSTR, 'sCaseOp'),
              (['in'], c_int, 'iRef'),
              (['in'], c_int, 'iPerm'),
              (['retval', 'out'], POINTER(BSTR), 'sDesc')),
    COMMETHOD([dispid(32), helpstring('method CasePermString')], HRESULT, 'CasePermString',
              (['in'], BSTR, 'sCaseOp'),
              (['in'], c_int, 'iRef'),
              (['in'], c_int, 'iPerm'),
              (['retval', 'out'], POINTER(BSTR), 'sOutput')),
    COMMETHOD([dispid(33), helpstring('method CasePermAnalFactor')], HRESULT, 'CasePermAnalFactor',
              (['in'], BSTR, 'sCaseOp'),
              (['in'], c_int, 'iRef'),
              (['in'], c_int, 'iPerm'),
              (['in'], c_int, 'iAnalRef'),
              (['retval', 'out'], POINTER(c_float), 'fFactor')),
    COMMETHOD([dispid(34), helpstring('method Output_Extract_CurPerm')], HRESULT, 'Output_Extract_CurPerm',
              (['retval', 'out'], POINTER(c_int), 'iPerm')),
    COMMETHOD([dispid(35), helpstring('method CaseResultsExist')], HRESULT, 'CaseResultsExist',
              (['in'], BSTR, 'sCaseOp'),
              (['in'], c_int, 'iRef'),
              (['in'], c_int, 'iPerm'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(36), helpstring('method CaseTask')], HRESULT, 'CaseTask',
              (['in'], c_int, 'iRef'),
              (['retval', 'out'], POINTER(c_int), 'iTask')),
    COMMETHOD([dispid(37), helpstring('method TaskStatus')], HRESULT, 'TaskStatus',
              (['in'], c_int, 'iRef'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(38), helpstring('method ProcessID')], HRESULT, 'ProcessID',
              (['retval', 'out'], POINTER(c_int), 'iID')),
    COMMETHOD([dispid(39), helpstring('method Gen_NodeAt')], HRESULT, 'Gen_NodeAt',
              (['in'], c_double, 'dX'),
              (['in'], c_double, 'dY'),
              (['in'], c_double, 'dZ'),
              (['in'], c_double, 'dCoincidenceTol'),
              (['retval', 'out'], POINTER(c_int), 'iNode')),
    COMMETHOD([dispid(40), helpstring('method Gen_SectionMatchDesc')], HRESULT, 'Gen_SectionMatchDesc',
              (['in'], BSTR, 'sDesc'),
              (['in'], c_int, 'iFlags'),
              (['retval', 'out'], POINTER(BSTR), 'sSectionDesc')),
    COMMETHOD([dispid(41), helpstring('method VersionString')], HRESULT, 'VersionString',
              (['retval', 'out'], POINTER(BSTR), 'sVersion')),
    COMMETHOD([dispid(42), helpstring('method SectionUsage')], HRESULT, 'SectionUsage',
              (['in'], c_int, 'iSec'),
              (['in', 'optional'], c_int, 'eSel', 3),
              (['in', 'optional'], c_int, 'iStage', 0),
              (['retval', 'out'], POINTER(c_int), 'iResult')),
    COMMETHOD([dispid(43), helpstring('method Gen_SectTransltnGsRevit')], HRESULT, 'Gen_SectTransltnGsRevit',
              (['in'], BSTR, 'nameIn'),
              ([], GsRevit_SectTrnsDir, 'eDir'),
              ([], GsRevit_Usage, 'usage'),
              (['in', 'out'], POINTER(BSTR), 'familyName'),
              (['retval', 'out'], POINTER(BSTR), 'nameOut')),
    COMMETHOD([dispid(44), helpstring('method MembNumElem')], HRESULT, 'MembNumElem',
              (['in'], c_int, 'iRef'),
              (['retval', 'out'], POINTER(c_int), 'nElem')),
    COMMETHOD([dispid(45), helpstring('method MembElemNum')], HRESULT, 'MembElemNum',
              (['in'], c_int, 'iRef'),
              (['in'], c_int, 'iIdx'),
              (['retval', 'out'], POINTER(c_int), 'iElem')),
    COMMETHOD([dispid(46), helpstring('method ElemMembNum')], HRESULT, 'ElemMembNum',
              (['in'], c_int, 'iRef'),
              (['retval', 'out'], POINTER(c_int), 'iMemb')),
    COMMETHOD([dispid(47), helpstring('method Tool_UpdateElemSections')], HRESULT, 'Tool_UpdateElemSections',
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(48), helpstring('method Tool_ResetMemberSections')], HRESULT, 'Tool_ResetMemberSections',
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(49), helpstring('method IsItemIncluded')], HRESULT, 'IsItemIncluded',
              (['in'], BSTR, 'sType'),
              (['in'], c_int, 'iIndex'),
              (['in'], BSTR, 'sList'),
              (['retval', 'out'], POINTER(c_int), 'retCode')),
    COMMETHOD([dispid(50), helpstring('method Gen_RegionMeshCheck')], HRESULT, 'Gen_RegionMeshCheck',
              (['in'], c_int, 'iIndex'),
              (['out'], POINTER(c_int), 'piError'),
              (['out'], POINTER(c_int), 'piWarning'),
              (['out'], POINTER(BSTR), 'psLog'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(51), helpstring('method Gen_RegionMeshGen')], HRESULT, 'Gen_RegionMeshGen',
              (['in'], c_int, 'iIndex'),
              (['out'], POINTER(c_int), 'piError'),
              (['out'], POINTER(c_int), 'piWarning'),
              (['out'], POINTER(BSTR), 'psLog'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(52), helpstring('method Gen_RegionMeshDel')], HRESULT, 'Gen_RegionMeshDel',
              (['in'], c_int, 'iIndex'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(53), helpstring('method GetSidTagValue')], HRESULT, 'GetSidTagValue',
              (['in'], BSTR, 'sKey'),
              (['in'], c_int, 'iRecord'),
              (['in'], BSTR, 'sTag'),
              (['retval', 'out'], POINTER(BSTR), 'psValue')),
    COMMETHOD([dispid(54), helpstring('method WriteSidTagValue')], HRESULT, 'WriteSidTagValue',
              (['in'], BSTR, 'sKey'),
              (['in'], c_int, 'iRecord'),
              (['in'], BSTR, 'sTag'),
              (['in'], BSTR, 'sValue'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(55), helpstring('method NodeCoor')], HRESULT, 'NodeCoor',
              (['in'], c_int, 'iRef'),
              (['out'], POINTER(c_double), 'pX'),
              (['out'], POINTER(c_double), 'pY'),
              (['out'], POINTER(c_double), 'pZ'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(56), helpstring('method Renumber_Init')], HRESULT, 'Renumber_Init',
              (['in'], GsaEntity, 'option'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(57), helpstring('method Renumber_SetTo')], HRESULT, 'Renumber_SetTo',
              (['in'], GsaEntity, 'option'),
              ([], c_int, 'oldRef'),
              ([], c_int, 'newRef'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(58), helpstring('method Renumber_Go')], HRESULT, 'Renumber_Go',
              (['in'], GsaEntity, 'option'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(59), helpstring('method SetLocale')], HRESULT, 'SetLocale',
              (['in'], Locale, 'Locale'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(60), helpstring('method Output_Init_Arr')], HRESULT, 'Output_Init_Arr',
              (['in'], c_int, 'iFlags'),
              (['in'], BSTR, 'sAxis'),
              (['in'], BSTR, 'sCase'),
              (['in'], ResHeader, 'header'),
              (['in'], c_int, 'iNumEqInt1DPos'),
              (['retval', 'out'], POINTER(c_short), 'psCode')),
    COMMETHOD([dispid(61), helpstring('method Output_Extract_Arr')], HRESULT, 'Output_Extract_Arr',
              (['in'], c_int, 'iRef'),
              (['out'], POINTER(_midlSAFEARRAY(GsaResults)), 'arrayResults'),
              (['out'], POINTER(c_int), 'NumComponents'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(62), helpstring('method EntitiesInList')], HRESULT, 'EntitiesInList',
              (['in'], BSTR, 'sList'),
              (['in', 'out'], POINTER(GsaEntity), 'listType'),
              (['out'], POINTER(_midlSAFEARRAY(c_int)), 'arrayEntities'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(63), helpstring('method CopyView')], HRESULT, 'CopyView',
              (['in'], BSTR, 'sViewType'),
              (['in'], c_int, 'idxView'),
              (['out'], POINTER(c_int), 'idxNewView'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(64), helpstring('method RenameView')], HRESULT, 'RenameView',
              (['in'], BSTR, 'sViewType'),
              (['in'], c_int, 'idxView'),
              (['in'], BSTR, 'sNewName'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(65), helpstring('method DeleteView')], HRESULT, 'DeleteView',
              (['in'], BSTR, 'sViewType'),
              (['in'], c_int, 'idxView'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(66), helpstring('method GetViewCaseList')], HRESULT, 'GetViewCaseList',
              (['in'], BSTR, 'sViewType'),
              (['in'], c_int, 'idxView'),
              (['out'], POINTER(BSTR), 'sList'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(67), helpstring('method SetViewCaseList')], HRESULT, 'SetViewCaseList',
              (['in'], BSTR, 'sViewType'),
              (['in'], c_int, 'idxView'),
              (['in'], BSTR, 'sList'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(68), helpstring('method GetViewDisplayList')], HRESULT, 'GetViewDisplayList',
              (['in'], BSTR, 'sViewType'),
              (['in'], c_int, 'idxView'),
              (['in', 'out'], POINTER(GsaEntity), 'listType'),
              (['out'], POINTER(BSTR), 'sList'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(69), helpstring('method SetViewDisplayList')], HRESULT, 'SetViewDisplayList',
              (['in'], BSTR, 'sViewType'),
              (['in'], c_int, 'idxView'),
              (['in'], GsaEntity, 'listType'),
              (['in'], BSTR, 'sList'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(70), helpstring('method RescaleViewData')], HRESULT, 'RescaleViewData',
              (['in'], c_int, 'idxView'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(71), helpstring('method NodeConnectedElem')], HRESULT, 'NodeConnectedEnt',
              (['in'], GsaEntity, 'entityType'),
              (['in'], c_int, 'nodeRef'),
              (['out'], POINTER(_midlSAFEARRAY(c_int)), 'entRefs'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(72), helpstring('method LogFeatureUsage')], HRESULT, 'LogFeatureUsage',
              (['in'], BSTR, 'featureIn')),
    COMMETHOD([dispid(73), helpstring('method Nodes: extract node objects using an array of node references')], HRESULT, 'Nodes',
              (['in'], _midlSAFEARRAY(c_int), 'nodeRefs'),
              (['out'], POINTER(_midlSAFEARRAY(GsaNode)), 'objNodes'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(74), helpstring('method SetNodes: set node objects into the model')], HRESULT, 'SetNodes',
              (['in'], _midlSAFEARRAY(GsaNode), 'objNodesIn'),
              (['in'], VARIANT_BOOL, 'Overwrite'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(75), helpstring('method Elements: extract element objects using an array of element references')], HRESULT, 'Elements',
              (['in'], _midlSAFEARRAY(c_int), 'elemRefs'),
              (['out'], POINTER(_midlSAFEARRAY(GsaElement)), 'objElems'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(76), helpstring('method SetElements: set element objects into the model')], HRESULT, 'SetElements',
              (['in'], _midlSAFEARRAY(GsaElement), 'objElemsIn'),
              (['in'], VARIANT_BOOL, 'Overwrite'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(77), helpstring('method Sections: extract section objects using an array of section references')], HRESULT, 'Sections',
              (['in'], _midlSAFEARRAY(c_int), 'sectRefs'),
              (['out'], POINTER(_midlSAFEARRAY(GsaSection)), 'objSections'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(78), helpstring('method SetSections: set section objects into the model')], HRESULT, 'SetSections',
              (['in'], _midlSAFEARRAY(GsaSection), 'objSectsIn'),
              (['in'], VARIANT_BOOL, 'Overwrite'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(79), helpstring('method MembCoorOnCurve')], HRESULT, 'MembCoorOnCurve',
              (['in'], c_int, 'iMembRef'),
              (['out'], POINTER(c_double), 'pX'),
              (['out'], POINTER(c_double), 'pY'),
              (['out'], POINTER(c_double), 'pZ'),
              (['retval', 'out'], POINTER(c_short), 'psCode')),
    COMMETHOD([dispid(80), helpstring('method MappingDBPath')], HRESULT, 'MappingDBPath',
              (['out'], POINTER(BSTR), 'psMappingPath'),
              (['retval', 'out'], POINTER(c_short), 'psCode')),
    COMMETHOD([dispid(81), helpstring('method Output_Extract_CutAssembly: extract cut section forces')], HRESULT, 'Output_Extract_CutAssembly',
              (['in'], c_int, 'assembRef'),
              (['in'], VARIANT_BOOL, 'Avg2DStress'),
              (['in'], BSTR, 'sCase'),
              (['in'], BSTR, 'sAxis'),
              (['out'], POINTER(_midlSAFEARRAY(GsaResults)), 'arrayResults'),
              (['retval', 'out'], POINTER(c_short), 'retCode')),
    COMMETHOD([dispid(82), helpstring('method ElemIsVertical')], HRESULT, 'ElemIsVertical',
              (['in'], c_int, 'iElem'),
              (['in', 'optional'], c_int, 'eSel', 3),
              (['retval', 'out'], POINTER(c_int), 'iResult')),
    COMMETHOD([dispid(83), helpstring('method ElemIsHorizontal')], HRESULT, 'ElemIsHorizontal',
              (['in'], c_int, 'iElem'),
              (['in', 'optional'], c_int, 'eSel', 3),
              (['retval', 'out'], POINTER(c_int), 'iResult')),
]
################################################################
# code template for IComAuto implementation
# class IComAuto_Impl(object):
# def TaskStatus(self, iRef):
##        'method TaskStatus'
# return retCode
##
# def Save(self):
##        'method Save'
# return retCode
##
# def CopyView(self, sViewType, idxView):
##        'method CopyView'
# return idxNewView, retCode
##
# def SaveAs(self, sPathName):
##        'method SaveAs'
# return retCode
##
# def PrintView(self, sView):
##        'method PrintView'
# return retCode
##
# def WriteSidTagValue(self, sKey, iRecord, sTag, sValue):
##        'method WriteSidTagValue'
# return retCode
##
# def ProcessID(self):
##        'method ProcessID'
# return iID
##
# def DeleteView(self, sViewType, idxView):
##        'method DeleteView'
# return retCode
##
# def ElemMembNum(self, iRef):
##        'method ElemMembNum'
# return iMemb
##
# def SetSections(self, objSectsIn, Overwrite):
##        'method SetSections: set section objects into the model'
# return retCode
##
# def Output_Extract_CutAssembly(self, assembRef, Avg2DStress, sCase, sAxis):
##        'method Output_Extract_CutAssembly: extract cut section forces'
# return arrayResults, retCode
##
# def Elements(self, elemRefs):
##        'method Elements: extract element objects using an array of element references'
# return objElems, retCode
##
# def EntitiesInList(self, sList):
##        'method EntitiesInList'
# return listType, arrayEntities, retCode
##
# def Output_UnitString(self):
##        'method Output_UnitString'
# return sUnit
##
# def UpdateViews(self):
##        'method UpdateViews'
# return
##
# def Output_1DElemPos(self, iPos):
##        'method Output_1DElemPos'
# return fPos
##
# def GetViewCaseList(self, sViewType, idxView):
##        'method GetViewCaseList'
# return sList, retCode
##
# def CaseResultsExist(self, sCaseOp, iRef, iPerm):
##        'method CaseResultsExist'
# return retCode
##
# def SetElements(self, objElemsIn, Overwrite):
##        'method SetElements: set element objects into the model'
# return retCode
##
# def Close(self):
##        'method Close'
# return retCode
##
# def Gen_RegionMeshGen(self, iIndex):
##        'method Gen_RegionMeshGen'
# return piError, piWarning, psLog, retCode
##
# def NodeCoor(self, iRef):
##        'method NodeCoor'
# return pX, pY, pZ, retCode
##
# def Output_Init_Arr(self, iFlags, sAxis, sCase, header, iNumEqInt1DPos):
##        'method Output_Init_Arr'
# return psCode
##
# def HighestCase(self, sCaseOp):
##        'method HighestCase'
# return iCase
##
# def Tool_UpdateElemSections(self):
##        'method Tool_UpdateElemSections'
# return retCode
##
# def Output_DataExist(self, iRef):
##        'method Output_DataExist'
# return retCode
##
# def Tool_ResetMemberSections(self):
##        'method Tool_ResetMemberSections'
# return retCode
##
# def Delete(self, sContent):
##        'method Delete'
# return retCode
##
# def MappingDBPath(self):
##        'method MappingDBPath'
# return psMappingPath, psCode
##
# def Output_DataTitle(self, iFlags):
##        'method Output_DataTitle'
# return sTitle
##
# def SetLocale(self, Locale):
##        'method SetLocale'
# return retCode
##
# def MembCoorOnCurve(self, iMembRef):
##        'method MembCoorOnCurve'
# return pX, pY, pZ, psCode
##
# def MembElemNum(self, iRef, iIdx):
##        'method MembElemNum'
# return iElem
##
# def CaseExist(self, sCaseOp, iRef):
##        'method CaseExist'
# return retCode
##
# def VersionString(self):
##        'method VersionString'
# return sVersion
##
# def NodeConnectedEnt(self, entityType, nodeRef):
##        'method NodeConnectedElem'
# return entRefs, retCode
##
# def Open(self, sPathName):
##        'method Open'
# return retCode
##
# def Arg(self, iIndex, sLine):
##        'method Arg'
# return sArg
##
# def Output_NumElemPos(self, iRef):
##        'method Output_NumElemPos'
# return iNum
##
# def NewFile(self):
##        'method NewFile'
# return retCode
##
# def SetNodes(self, objNodesIn, Overwrite):
##        'method SetNodes: set node objects into the model'
# return retCode
##
# def CaseNumPerm(self, sCaseOp, iRef):
##        'method CaseNumPerm'
# return nPerm
##
# def MembNumElem(self, iRef):
##        'method MembNumElem'
# return nElem
##
# def ElemIsVertical(self, iElem, eSel):
##        'method ElemIsVertical'
# return iResult
##
# def Output_SetStage(self, iStage):
##        'method Output_SetStage'
# return retCode
##
# def Output_Extract_Arr(self, iRef):
##        'method Output_Extract_Arr'
# return arrayResults, NumComponents, retCode
##
# def CaseTask(self, iRef):
##        'method CaseTask'
# return iTask
##
# def GetViewDisplayList(self, sViewType, idxView):
##        'method GetViewDisplayList'
# return listType, sList, retCode
##
# def IsItemIncluded(self, sType, iIndex, sList):
##        'method IsItemIncluded'
# return retCode
##
# def ViewName(self, sViewType, iRef):
##        'method ViewName'
# return sName
##
# def SetViewCaseList(self, sViewType, idxView, sList):
##        'method SetViewCaseList'
# return retCode
##
# def SetViewDisplayList(self, sViewType, idxView, listType, sList):
##        'method SetViewDisplayList'
# return retCode
##
# def Analyse(self, Task):
##        'method Analyse'
# return retCode
##
# def Output_Extract_CurPerm(self):
##        'method Output_Extract_CurPerm'
# return iPerm
##
# def Output_Extract(self, iRef, iPos):
##        'method Output_Extract'
# return cVariant
##
# def GetSidTagValue(self, sKey, iRecord, sTag):
##        'method GetSidTagValue'
# return psValue
##
# def Output_UnitFactor(self):
##        'method Output_UnitFactor'
# return fFactor
##
# def NumArg(self, sLine):
##        'method NumArg'
# return iArg
##
# def RescaleViewData(self, idxView):
##        'method RescaleViewData'
# return retCode
##
# def Output_Init(self, iFlags, sAxis, sCase, iDataRef, iNumEqInt1DPos):
##        'method Output_Init'
# return retCode
##
# def CasePermString(self, sCaseOp, iRef, iPerm):
##        'method CasePermString'
# return sOutput
##
# def ElemIsHorizontal(self, iElem, eSel):
##        'method ElemIsHorizontal'
# return iResult
##
# def GwaCommand(self, sCommand):
##        'method GwaCommand'
# return result
##
# def Renumber_SetTo(self, option, oldRef, newRef):
##        'method Renumber_SetTo'
# return retCode
##
# def Gen_SectionMatchDesc(self, sDesc, iFlags):
##        'method Gen_SectionMatchDesc'
# return sSectionDesc
##
# def HighestView(self, sViewType):
##        'method HighestView'
# return iView
##
# def Renumber_Go(self, option):
##        'method Renumber_Go'
# return retCode
##
# def Gen_RegionMeshCheck(self, iIndex):
##        'method Gen_RegionMeshCheck'
# return piError, piWarning, psLog, retCode
##
# def Output_IsDataRef(self, iFlags):
##        'method Output_IsDataRef'
# return retCode
##
# def Gen_SectTransltnGsRevit(self, nameIn, eDir, usage):
##        'method Gen_SectTransltnGsRevit'
# return familyName, nameOut
##
# def CaseName(self, sCaseOp, iRef):
##        'method CaseName'
# return sName
##
# def CasePermDesc(self, sCaseOp, iRef, iPerm):
##        'method CasePermDesc'
# return sDesc
##
# def Nodes(self, nodeRefs):
##        'method Nodes: extract node objects using an array of node references'
# return objNodes, retCode
##
# def CasePermAnalFactor(self, sCaseOp, iRef, iPerm, iAnalRef):
##        'method CasePermAnalFactor'
# return fFactor
##
# def Gen_NodeAt(self, dX, dY, dZ, dCoincidenceTol):
##        'method Gen_NodeAt'
# return iNode
##
# def Gen_RegionMeshDel(self, iIndex):
##        'method Gen_RegionMeshDel'
# return retCode
##
# def RenameView(self, sViewType, idxView, sNewName):
##        'method RenameView'
# return retCode
##
# def ViewExist(self, sViewType, iRef):
##        'method ViewExist'
# return retCode
##
# def LogFeatureUsage(self, featureIn):
##        'method LogFeatureUsage'
# return
##
# def Sections(self, sectRefs):
##        'method Sections: extract section objects using an array of section references'
# return objSections, retCode
##
# def Renumber_Init(self, option):
##        'method Renumber_Init'
# return retCode
##
# def SaveViewToFile(self, sView, sFileType):
##        'method SaveViewToFile'
# return retCode
##
# def SectionUsage(self, iSec, eSel, iStage):
##        'method SectionUsage'
# return iResult
##


class ComAuto(CoClass):
    'ComAuto Class'
    _reg_clsid_ = GUID('{F32E2515-B54D-420C-9C96-D50C2744D4E0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{668500CE-5D79-454D-978C-5A4B0BF0E8EC}', 10, 1)


ComAuto._com_interfaces_ = [IComAuto]


class Library(object):
    'Gsa 10.1 Type Library'
    name = 'Gsa_10_1'
    _reg_typelib_ = ('{668500CE-5D79-454D-978C-5A4B0BF0E8EC}', 10, 1)


# values for enumeration 'ElementType'
BAR = 1
BEAM = 2
SPRING = 3
MASS = 4
QUAD4 = 5
QUAD8 = 6
TRI3 = 7
TRI6 = 8
LINK = 9
CABLE = 10
BRICK8 = 12
BRICK20 = 13
WEDGE6 = 14
WEDGE15 = 15
TETRA4 = 16
TETRA10 = 17
GRD_SPRING = 18
SPACER = 19
STRUT = 20
TIE = 21
BEAM3 = 22
ElementType = c_int  # enum

# values for enumeration 'GsRevit_Units'
METRIC = 1
IMPERIAL = 2
GsRevit_Units = c_int  # enum
__all__ = ['TRI6', 'SPACER', 'ResHeader', 'RD_RPIN',
           'REF_STRESS_EL1D', 'RD_ZZ', 'GsaElement', 'GsaSection',
           'IMPERIAL', 'SPRING', 'REF_MOMENT_EL2D_PRJ', 'Locale',
           'STRUT', 'BRICK8', 'RD_ROT', 'ComAuto', 'RD_DIS',
           'TETRA10', 'REF_SED_AVG_EL1D', 'RD_Z', 'REF_DISP',
           'GsaResults', 'RD_XX', 'NODE', 'REF_DISP_EL2D',
           'RestraintDir', 'REF_DISP_EL0D', 'REF_STRAIN_EL1D',
           'RD_FREE', 'REF_STRESS_EL2D_AX', 'BEAM', 'GsRevit_Units',
           'REF_FORCE_EL1D', 'REF_DISP_EL1D', 'REF_STRESS_EL1D_DRV',
           'GsaEntity', 'ElementType', 'REF_END_ROT_EL1D',
           'REF_FORCE_EL2D_PRJ', 'WEDGE15', 'LOC_EN_GB', 'BAR',
           'REF_FORCE_CONSTR', 'REF_SOIL_NODAL', 'AREA', 'RD_X',
           'GRD_SPRING', 'QUAD8', 'WEDGE6', 'REGION', 'CABLE', 'LINK',
           'REF_STL_UTIL', 'TIE', 'COLUMNS', 'REF_FORCE_NODAL',
           'GsRevit_Usage', 'BRICK20', 'REF_RC_SLAB_REINF', 'RD_PIN',
           'ELEMENT', 'LINE', 'FRAMING', 'METRIC',
           'REF_FORCE_EL2D_DRV', 'TRI3', 'REF_STRESS_EL2D_DRV',
           'GSA_TO_REVIT', 'REF_STRESS_EL2D_PRJ', 'QUAD4', 'BEAM3',
           'REVIT_TO_GSA', 'GsRevit_SectTrnsDir', 'REF_REAC',
           'REF_SED_EL1D', 'RD_ENC', 'REF_MASS_NODAL', 'IComAuto',
           'MASS', 'GsaNode', 'LOC_SYSTEM', 'RD_YY', 'RD_ALL',
           'REF_FORCE_EL0D', 'REF_VEL', 'RD_Y', 'REF_ACC', 'MEMBER',
           'TETRA4']
#from comtypes import _check_version; _check_version('')
