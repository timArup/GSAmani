# -*- coding: utf-8 -*-
'''
Copyright (c) 2017 Alex de Oliveira

Permission is hereby granted, free of charge, to any person obtaining a copy of
 this software and associated documentation files (the "Software"), to deal in
 the Software without restriction, including without limitation the rights to
 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 of the Software, and to permit persons to whom the Software is furnished to do
 so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''

from enum import IntEnum
import re


class EntityEnum(IntEnum):
    NODE = 1
    EL = 2
    MEMB = 3
    LINE = 6
    AREA = 7
    REGION = 8


class ElementEnum(object):
    TYPE_BAR = 'BAR'
    TYPE_TIE = 'TIE'
    TYPE_STRUT = 'STRUT'
    TYPE_BEAM = 'BEAM'
    TYPE_ROD = 'ROD'
    TYPE_SPRING = 'SPRING'
    TYPE_DAMPER = 'DAMPER'
    TYPE_LINK = 'LINK'
    TYPE_CABLE = 'CABLE'
    TYPE_SPACER = 'SPACER'
    TYPE_MASS = 'MASS'
    TYPE_GROUND_SPRING = 'GRD_SPRING'
    TYPE_GROUND_DAMPER = 'GRD_DAMPER'
    TYPE_TRI3 = 'TRI3'
    TYPE_TRI6 = 'TRI6'
    TYPE_QUAD4 = 'QUAD4'
    TYPE_QUAD8 = 'QUAD8'
    TYPE_BRICK8 = 'BRICK8'
    RLS_FIX = 'F'
    RLS_STIFF = 'K'
    RLS_RLS = 'R'
    OFFSET_TYPE_GLOBAL = 'OFFSET'
    OFFSET_TYPE_LOCAL = 'LOCAL_OFFSET'
    # Number of dimensions in the following freedoms
    OFFSET_AXIAL_DIM = 2
    OFFSET_BEAM_DIM = 4
    OFFSET_NONE_DIM = 0
    OFFSET_SPACE_DIM = 3
    OFFSET_PLANAR_DIM = 1

class MemberEnum(object):
    TYPE_BEAM = 'BEAM'
    TYPE_COLUMN = 'COLUMN'
    TYPE_CANTILEVER = 'CANTILEVER'
    TYPE_1D_GENERIC = '1D_GENERIC'
    TYPE_2D_GENERIC = '2D_GENERIC'
    TYPE_3D_GENERIC = '3D_GENERIC'
    TYPE_SLAB = 'SLAB'
    TYPE_WALL = 'WALL'
    TYPE_2D_VOID_CUTTER = "2D_VOID_CUTTER"
    TYPE_3D_VOID_CUTTER = "3D_VOID_CUTTER"
    GEOM_LINEAR = 'LINE'
    GEOM_ARC = 'ARC'
    GEOM_RADIUS = 'RAD'
    END_CONDITION_PIN = "Pinned"
    END_CONDITION_FIXED = "Fixed"
    END_CONDITION_FREE = "Free"
    END_CONDITION_FULLROT = "Full rotational"
    END_CONDITION_PARTIALROT = "Partial rotational"
    END_CONDITION_TOPFLANGELATERAL = "Top flange lateral"
    EFFECTIVE_LENGTH_AUTOMATIC = 'AUTOMATIC'
    EFFECTIVE_LENGTH_EXPLICIT = 'EXPLICIT'
    EFFECTIVE_LENGTH_GIVEN = 'EFF_LEN'
    EXPOSURE_ALL = 'ALL'
    EXPOSURE_THREESIDES = 'THREE'
    EXPOSURE_TOPBOT = 'TOP_BOT'
    EXPOSURE_SIDES = 'SIDES'
    EXPOSURE_ONE = 'ONE'
    EXPOSURE_NONE = 'NONE'
    LOAD_HEIGHT_SHEAR_CENTRE = 0
    LOAD_HEIGHT_TOP_FLANGE = 1
    LOAD_HEIGHT_BOTTOM_FLANGE = 2


class RebarEnum(object):
    LAYER_TOP_X = "TOP_X "
    LAYER_TOP_Y = "TOP_Y"
    LAYER_BOTTOM_X = "BOTTOM_X"
    LAYER_BOTTOM_Y = "BOTTOM_Y"


class UserModuleEnum(object):
    DIR_X = 'X'
    DIR_Y = 'Y'
    DIR_Z = 'Z'
    DIR_NONE = 'NONE'
    CONTOUR_BLOB = 'BLOB'
    CONTOUR_BLOB_SHIFT = 'BLOB_SHIFT'
    CONTOUR_CONTINUOUS = 'CONT'
    IS_CENTRE_VALUE_ONLY_YES = 'CENTRE_ONLY_2D'
    IS_CENTRE_VALUE_ONLY_NO = 'NOT_CENTRE_ONLY_2D'

class MaterialEnum(object):
    STEEL = 'STEEL'
    CONCRETE = 'CONCRETE'
    FRP = 'FRP'
    ALUMINUM = 'ALUMINUM'
    TIMBER = 'TIMBER'
    GLASS = 'GLASS'
    GENERIC = 'GENERIC'

class SectionTypeEnum(object):
    CATALOGUE = 'CAT'
    STANDARD = 'STD'
    GEOMETRY = 'GEO'
    RECTANGULAR = 'R'
    RECTANGULAR_HOLLOW = 'RHS'
    CIRCULAR = 'C'
    CIRCULAR_HOLLOW = 'CHS'
    I_SECTION = 'I'
    TEE_SECTION = 'T'
    CHANNEL = 'CH'
    DOUBLE_CHANNEL = 'DCH'
    ANGLE = 'A'
    DOUBLE_ANGLE = 'D'
    PERIMETER = 'P'
    FABRICATED = 'F'

class AxisEnum(object):
    CARTESIAN = 'CART'
    CYLINDRICAL = 'CYL'
    SPHERICAL = 'SPH'


class NodeAxisEnum(object):
    GLOBAL = 0
    X_ELEVATION = 'X_ELEV'
    Y_ELEVATION = 'Y_ELEV'
    GLOBAL_CYLINDRICAL = 'CYLINDRICAL'
    VERTICAL = 'VERTICAL'

class BeamAxisEnum(object):
    GLOBAL = 'GLOBAL'
    LOCAL = 'LOCAL'
    LOCAL_DEFORMED = 'NATURAL'

class LineAxisEnum(object):
    GLOBAL = 'GLOBAL'

class UserModuleAxisEnum(object):
    GLOBAL = 'GLOBAL'
    LOCAL = 'LOCAL'

class DirEnum(object):
    X = 'X'
    Y = 'Y'
    Z = 'Z'
    XX = 'XX'
    YY = 'YY'
    ZZ = 'ZZ'

class AnalysisSolverEnum(object):
    GSS = 'GSS'
    GSRELAX = 'GSRELAX'
    GSSPEC = 'GSSPEC'
    DYNAMIC_RESP = 'DYNAMIC_RESP'
    PSEUDO_RSA = 'PSEUDO_RSA'
    HARMONIC = 'HARMONIC'
    TIME_HISTORY = 'TIME_HISTORY'
    EXP_TIME_HIST = 'EXP_TIME_HIST'
    FOOTFALL = 'FOOTFALL'
    PERIODIC = 'PERIODIC'
    GSRAFT = 'GSRAFT'
    GSBRIDGE = 'GSBRIDGE'
    ENVELOPE = 'ENVELOPE'
    GENERIC = 'GENERIC'
    NASTRAN = 'NASTRAN'
    DYNA = 'DYNA'
    OPENSEES = 'OPENSEES'
    ASAS = 'ASAS'
    EXTERNAL = 'EXT'

class AnalysisResultOutputEnum(object):
    NODE_DISPLACEMENTS = 'D'
    VELOCITY = 'V'
    ACCELERATION = 'A'
    REACTIONS = 'R'
    CONSTRAINT_FORCES = 'C'
    MASS = 'M'
    ELEMENT_DISPLACEMENTS = 'E'
    FORCES_AND_MOMENTS = 'F'
    ELEMENT_FORCES_2D = 'N'
    ELEMENT_LOCAL_STRESSES_2D = 'S'
    ELEMENT_GLOBAL_STRESSES_2D = 'Q'
    ELEMENT_LOCAL_STRESSES_3D = 'B'
    ELEMENT_GLOBAL_STRESSES_3D = 'H'
    STRAIN_ENERGY_DENSITY = 'U'
    VALUE_AT_2D_CENTRE_ONLY = '*'

class GSSTypeEnum(object):
    UNDEF = 'UNDEF'
    STATIC = 'STATIC'
    MODAL = 'MODAL'
    RITZ = 'RITZ'
    BUCKLING = 'BUCKLING'
    STATIC_P_DELTA = 'STATIC_P_DELTA'
    MODAL_P_DELTA = 'MODAL_P_DELTA'
    RITZ_P_DELTA = 'RITZ_P_DELTA'
    MASS = 'MASS'
    STABILITY = 'STABILITY'
    STABILITY_P_DELTA = 'STABILITY_P_DELTA'

class GSSOptionsEnum(object):
    P_DELTA_ALL_CASE = 'DEFINE'
    P_DELTA_PER_CASE = 'SELF'
    FRONT_ORDER_GEOMETRIC = 'GEO'
    FRONT_ORDER_RCMK = 'RCMK'
    FRONT_ORDER_CMK = 'CMK'
    FRONT_ORDER_MIN = 'MIN'
    FRONT_ORDER_NODE = 'NODE'
    GEOMETRY_CHECK_ERROR = 'ERROR'
    GEOMETRY_CHECK_SEVERE = 'SEVERE'
    GEOMETRY_CHECK_FATAL = 'FATAL'
    RAFT_PRECISION_HIGH = 'RAFT_HI'
    RAFT_PRECISION_LOW = 'RAFT_LO'
    RESIDUAL_NO_SAVE = 'RESID_NO'
    RESIDUAL_SAVE_IF_NOCONV = 'RESID_NOCONV'
    RESIDUAL_SAVE = 'RESID_YES'

class GsRelaxTypeEnum:
    UNDEF = 'UNDEF'
    NONLINEAR_STATIC = 'BUCKLING_NL'
    NONLINEAR_STATIC_DEPR = 'STATIC_NL'
    FORM_FINDING = 'FORM_FINDING'
    BUCKLING_MEMBER = 'BUCKLING_MEMBER'

class GSRelaxOptionsEnum(object):
    LOAD_SCHEME_SINGLE = 'SINGLE'
    LOAD_SCHEME_AUTO = 'AUTO'
    LOAD_SCHEME_FORM_FIND = 'FORM_FIND'
    LOAD_SCHEME_SOAP_FORM = 'SOAP_FORM'
    LOAD_SCHEME_FORCE_FORM = 'FORCE_FORM'
    LOAD_SCHEME_MEMB_BUCKLE = 'MEMB_BUCKLE'
    TERMINATION_CONTROL_CYCLE = 'CYCLE'
    TERMINATION_CONTROL_TIME = 'TIME'
    RESIDUAL_CONTROL_RELATIVE = 'REL'
    RESIDUAL_CONTROL_ABSOLUTE = 'ABS'
    RESIDUAL_NO_SAVE = 'RESID_NO'
    RESIDUAL_SAVE_IF_NOCONV = 'RESID_NOCONV'
    RESIDUAL_SAVE = 'RESID_YES'
    DAMPING_TYPE_ARTIFICIAL = 'DAMP_ARTIFICIAL'
    DAMPING_TYPE_VISCOUS = 'DAMP_VISCOUS'
    SAVE_SPACER_LOAD_TO_ELEM = 'FF_SAVE_SPACER_FORCE_TO_ELEM'
    SAVE_SPACER_LOAD_TO_SPACER = 'FF_SAVE_SPACER_FORCE_TO_SPACER'
    SAVE_SPACER_LOAD_TO_NONE = 'FF_SAVE_SPACER_FORCE_TO_NONE'
    # CONFIRM with Stephen if correct...
    SHOW_PROGRESS_NONE = 'SHOW_PROGRESS_NONE'
    SHOW_GRAPHIC_NO = 'SHOW_GRAPHIC_NO'

class GSSpecEnum(object):
    COMBO_SRSS = 'SRSS'
    COMBO_CQC = 'CQC'
    COMBO_ROSEMBLUTH = 'ROSEMBLUTH'
    COMBO_ABSSUM = 'ABSSUM'
    COMBO_CQC3 = 'CQC3'
    RIGID_RESP_NO_RIGID = 'RESP_NO_RIGID'
    RIGID_RESP_GUPTA = 'RESP_GUPTA'
    RIGID_LINDLEY_YOW = 'LINDLEY_YOW'
    DAMP_CALC_CONST = 'CONST'
    DAMP_CALC_CODE = 'CODE'
    DAMP_CALC_MODE = 'MODE'
    DAMP_CALC_TABLE = 'TABLE'
    DAMP_SCALE_CODE = 'CODE'
    DAMP_SCALE_ISO = 'ISO'
    DAMP_SCALE_NEWMARK_50 = 'NEWMARK_50'
    DAMP_SCALE_NEWMARK_84 = 'NEWMARK_84'
    EXCITE_TYPE_BASE = 'BASE_EXCITE'
    EXCITE_TYPE_LOAD = 'LOAD_EXCITE'

class ConstraintRigidEnum(object):
    ALL = 'ALL'
    PIN = 'PIN'
    XY_PLANE = 'XY_PLANE'
    YZ_PLANE = 'YZ_PLANE'
    ZX_PLANE = 'ZX_PLANE'
    XY_PLANE_PIN = 'XY_PLANE_PIN'
    YZ_PLANE_PIN = 'YZ_PLANE_PIN'
    ZX_PLANE_PIN = 'ZX_PLANE_PIN'
    XY_PLATE = 'XY_PLATE'
    YZ_PLATE = 'YZ_PLATE'
    ZX_PLATE = 'ZX_PLATE'
    XY_PLATE_PIN = 'XY_PLATE_PIN'
    YZ_PLATE_PIN = 'YZ_PLATE_PIN'
    ZX_PLATE_PIN = 'ZX_PLATE_PIN'

class Colours(object):
    none = 'NO_RGB'
    black = 'BLACK'
    maroon = 'MAROON'
    dark_red = 'DARK_RED'
    red = 'RED'
    orange_red = 'ORANGE_RED'
    dark_green = 'DARK_GREEN'
    green = 'GREEN'
    olive = 'OLIVE'
    dark_orange = 'DARK_ORANGE'
    orange = 'ORANGE'
    gold = 'GOLD'
    lawn_green = 'LAWN_GREEN'
    lime = 'LIME'
    chartreuse = 'CHARTREUSE'
    yellow = 'YELLOW'
    dark_goldenrod = 'DARK_GOLDENROD'
    saddle_brown = 'SADDLE_BROWN'
    chocolate = 'CHOCOLATE'
    goldenrod = 'GOLDENROD'
    firebrick = 'FIREBRICK'
    forest_green = 'FOREST_GREEN'
    olive_drab = 'OLIVE_DRAB'
    brown = 'BROWN'
    sienna = 'SIENNA'
    dark_olive_green = 'DARK_OLIVE_GREEN'
    green_yellow = 'GREEN_YELLOW'
    limegreen = 'LIMEGREEN'
    yellow_green = 'YELLOW_GREEN'
    crimson = 'CRIMSON'
    peru = 'PERU'
    tomato = 'TOMATO'
    dark_slate_grey = 'DARK_SLATE_GREY'
    coral = 'CORAL'
    sea_green = 'SEA_GREEN'
    indian_red = 'INDIAN_RED'
    sandy_brown = 'SANDY_BROWN'
    dim_grey = 'DIM_GREY'
    dark_khaki = 'DARK_KHAKI'
    midnight_blue = 'MIDNIGHT_BLUE'
    medium_sea_green = 'MEDIUM_SEA_GREEN'
    salmon = 'SALMON'
    dark_salmon = 'DARK_SALMON'
    light_salmon = 'LIGHT_SALMON'
    spring_green = 'SPRING_GREEN'
    navy = 'NAVY'
    purple = 'PURPLE'
    teal = 'TEAL'
    grey = 'GREY'
    light_coral = 'LIGHT_CORAL'
    indigo = 'INDIGO'
    medium_violet_red = 'MEDIUM_VIOLET_RED'
    burlywood = 'BURLYWOOD'
    dark_blue = 'DARK_BLUE'
    dark_magenta = 'DARK_MAGENTA'
    dark_slate_blue = 'DARK_SLATE_BLUE'
    dark_cyan = 'DARK_CYAN'
    tan = 'TAN'
    khaki = 'KHAKI'
    rosy_brown = 'ROSY_BROWN'
    dark_sea_green = 'DARK_SEA_GREEN'
    slate_grey = 'SLATE_GREY'
    light_green = 'LIGHT_GREEN'
    deep_pink = 'DEEP_PINK'
    pale_violet_red = 'PALE_VIOLET_RED'
    pale_green = 'PALE_GREEN'
    light_slate_grey = 'LIGHT_SLATE_GREY'
    medium_spring_green = 'MEDIUM_SPRING_GREEN'
    cadet_blue = 'CADET_BLUE'
    dark_grey = 'DARK_GREY'
    light_sea_green = 'LIGHT_SEA_GREEN'
    medium_aquamarine = 'MEDIUM_AQUAMARINE'
    pale_goldenrod = 'PALE_GOLDENROD'
    navajo_white = 'NAVAJO_WHITE'
    wheat = 'WHEAT'
    hot_pink = 'HOT_PINK'
    steel_blue = 'STEEL_BLUE'
    moccasin = 'MOCCASIN'
    peach_puff = 'PEACH_PUFF'
    silver = 'SILVER'
    light_pink = 'LIGHT_PINK'
    bisque = 'BISQUE'
    pink = 'PINK'
    dark_orchid = 'DARK_ORCHID'
    medium_turquoise = 'MEDIUM_TURQUOISE'
    medium_blue = 'MEDIUM_BLUE'
    slate_blue = 'SLATE_BLUE'
    blanched_almond = 'BLANCHED_ALMOND'
    lemon_chiffon = 'LEMON_CHIFFON'
    turquoise = 'TURQUOISE'
    dark_turquoise = 'DARK_TURQUOISE'
    light_goldenrod_yellow = 'LIGHT_GOLDENROD_YELLOW'
    dark_violet = 'DARK_VIOLET'
    medium_orchid = 'MEDIUM_ORCHID'
    light_grey = 'LIGHT_GREY'
    aquamarine = 'AQUAMARINE'
    papaya_whip = 'PAPAYA_WHIP'
    orchid = 'ORCHID'
    antique_white = 'ANTIQUE_WHITE'
    thistle = 'THISTLE'
    medium_purple = 'MEDIUM_PURPLE'
    gainsboro = 'GAINSBORO'
    beige = 'BEIGE'
    cornsilk = 'CORNSILK'
    plum = 'PLUM'
    light_steel_blue = 'LIGHT_STEEL_BLUE'
    light_yellow = 'LIGHT_YELLOW'
    royal_blue = 'ROYAL_BLUE'
    misty_rose = 'MISTY_ROSE'
    blue_violet = 'BLUE_VIOLET'
    light_blue = 'LIGHT_BLUE'
    powderblue = 'POWDERBLUE'
    linen = 'LINEN'
    oldlace = 'OLDLACE'
    skyblue = 'SKYBLUE'
    cornflower_blue = 'CORNFLOWER_BLUE'
    medium_slate_blue = 'MEDIUM_SLATE_BLUE'
    violet = 'VIOLET'
    pale_turquoise = 'PALE_TURQUOISE'
    seashell = 'SEASHELL'
    floral_white = 'FLORAL_WHITE'
    honeydew = 'HONEYDEW'
    ivory = 'IVORY'
    lavender_blush = 'LAVENDER_BLUSH'
    white_smoke = 'WHITE_SMOKE'
    light_sky_blue = 'LIGHT_SKY_BLUE'
    lavender = 'LAVENDER'
    snow = 'SNOW'
    mint_cream = 'MINT_CREAM'
    blue = 'BLUE'
    magenta = 'MAGENTA'
    dodger_blue = 'DODGER_BLUE'
    deep_sky_blue = 'DEEP_SKY_BLUE'
    alice_blue = 'ALICE_BLUE'
    ghost_white = 'GHOST_WHITE'
    cyan = 'CYAN'
    light_cyan = 'LIGHT_CYAN'
    azure = 'AZURE'
    white = 'WHITE'

    @staticmethod
    def rgb_from_hex_str(hex_num):
        """

        :param hex_num:
        :return:
        """
        return int(hex_num[4:8], 16), int('0x' + hex_num[8:10], 16), int('0x' + hex_num[10:12], 0)

    @staticmethod
    def rgb_from_rgb_str(rgb_str):
        """

        :param rgb_str:
        :return:
        """
        return [int(x) for x in re.split(',', re.search('[0-9,]+', rgb_str).group(0))]

    @staticmethod
    def rbg_str_from_rgb(red, green, blue):
        """

        :param red:
        :param green:
        :param blue:
        :return:
        """
        return 'RGB({},{},{})'.format(red, green, blue)